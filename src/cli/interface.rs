use clap::{App, Arg, ArgMatches};
use colored::*;

pub fn banner() {
    eprintln!("{}", include_str!("banner").bold().red())
}

pub fn args() -> ArgMatches {
    App::new("pdfrip")
        .version("1.0.0")
        .author("Mufeed VH <contact@mufeedvh.com>")
        .about("A fast PDF password cracking utility written in Rust.")
        .arg(Arg::new("filename")
            .help("The filename of the PDF")
            .value_name("PDF FILE PATH")
            .required(true)
            .index(1))
        .arg(Arg::new("wordlist")
            .short('w')
            .long("wordlist")
            .value_name("WORDLIST FILE PATH")
            .help("Path to the password wordlist.")
            .takes_value(true))
        .arg(Arg::new("num_bruteforce")
            .short('n')
            .long("num-bruteforce")
            .value_name("NUMBER RANGE")
            .help("Bruteforce numbers for the password with the given range.\n\nlike `-n 0-1000000`")
            .takes_value(true))
        .arg(Arg::new("date_bruteforce")
            .short('d')
            .long("date-bruteforce")
            .value_name("YEAR")
            .help("Bruteforce dates (all 365 days in DDMMYYYY format) for the password with the given year.")
            .takes_value(true))
        .arg(Arg::new("custom_query")
            .short('q')
            .long("custom-query")
            .value_name("QUERY")
            .help("Start a bruteforce attack with a custom formatted query and a number range.\n\nlike `-q STRING{1000-3000}`")
            .takes_value(true))
        .arg(Arg::new("add_preceding_zeros")
            .short('z')
            .long("add-preceding-zeros")
            .help("Enabling this adds preceding zeros to number ranges in custom queries.\n\nlike `STRING{10-5000}` would start from `0010` matching the length of the ending range.")
            .takes_value(false))
        .get_matches()
}